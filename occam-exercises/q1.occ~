#INCLUDE "consts.inc"
#USE "course.lib"

--* This outputs even numbers from 0 upwards
PROC S0 (CHAN INT out!)
  INT n:
  SEQ
    n := 0
    WHILE TRUE
      SEQ
        out ! n
        n := n + 2
:

--* This outputs odd numbers from 1 upwards
PROC S1 (CHAN INT out!)
  INT n:
  SEQ
    n := 1
    WHILE TRUE
      SEQ
        out ! n
        n := n + 2
:

--* This pauses execution of the invoking process by delay microseconds.
-- Other processes are unaffected.
-- @param delay The length of the pause (in microseconds)
PROC pause (VAL INT delay)
  TIMER tim:
  INT t:
  SEQ
    tim ? t
    tim ? AFTER t PLUS delay
:

--* This inputs a number and tabulates it on a single line of output.
-- Then, it pauses for delay microseconds.  It repeats this for ever.
-- @param delay The length of the pause (in microseconds)
-- @param columns Number of columns of output to print
-- @param in Numbers coming in
-- @param out Characters going out
PROC print.stream (VAL INT delay, columns, CHAN INT in?, CHAN BYTE out!)
  WHILE TRUE
    INT n:
    INT count:
    SEQ
      count := 0
      WHILE (count < columns)
        SEQ
          in ? n
          out.int (n, 10, out!)      -- out.int is from "course.lib"
          count := count + 1
      out.string ("*c*n", 0, out!)      -- out.string is from "course.lib"
      pause (delay)
:

--* This multiplexes numbers from its two input channels to its output channel.
-- It alternates taking one number from one channel and forwarding it - then
-- from the other channel and forwarding it.  It continues doing this for ever.
-- It assumes numbers will always be offered to both input channels.
PROC alternate (CHAN INT in0?, in1?, out!)
  INT n:
  WHILE TRUE
    SEQ
      in0 ? n
      out ! n
      in1 ? n
      out ! n
:

--* Filters out multiples of 5.
PROC filter (CHAN INT in?, CHAN INT out!)
  INT n:
  WHILE TRUE
    SEQ
      in ? n
      IF
        (n \ 5) = 0
          SKIP
        TRUE
          out ! n
:

PROC q1 (CHAN BYTE keyboard?, screen!, error!)
  CHAN INT a:
  CHAN INT b:
  CHAN INT c:
  CHAN INT d:
  PAR
    S0 (a!)
    S1 (b!)
    alternate (a?, b?, c!)
    filter (c?, d!)
    print.stream (100000, 3, d?, screen!)
:
